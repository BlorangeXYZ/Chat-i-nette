"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRecordDef = void 0;
const zod_1 = require("zod");
const parseDef_1 = require("../parseDef");
const string_1 = require("./string");
function parseRecordDef(def, refs) {
    var _a, _b, _c;
    const schema = {
        type: "object",
        additionalProperties: (0, parseDef_1.parseDef)(def.valueType._def, Object.assign(Object.assign({}, refs), { currentPath: [...refs.currentPath, "additionalProperties"] })) || {},
    };
    if (((_a = def.keyType) === null || _a === void 0 ? void 0 : _a._def.typeName) === zod_1.ZodFirstPartyTypeKind.ZodString &&
        ((_b = def.keyType._def.checks) === null || _b === void 0 ? void 0 : _b.length)) {
        const keyType = Object.entries((0, string_1.parseStringDef)(def.keyType._def, refs)).reduce((acc, [key, value]) => (key === "type" ? acc : Object.assign(Object.assign({}, acc), { [key]: value })), {});
        return Object.assign(Object.assign({}, schema), { propertyNames: keyType });
    }
    else if (((_c = def.keyType) === null || _c === void 0 ? void 0 : _c._def.typeName) === zod_1.ZodFirstPartyTypeKind.ZodEnum) {
        return Object.assign(Object.assign({}, schema), { propertyNames: {
                enum: def.keyType._def.values,
            } });
    }
    return schema;
}
exports.parseRecordDef = parseRecordDef;
